// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go

// Package cache_test is a generated GoMock package.
package cache_test

import (
	context "context"
	models "github.com/serhiihuberniuk/unstable-api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockcache is a mock of cache interface.
type Mockcache struct {
	ctrl     *gomock.Controller
	recorder *MockcacheMockRecorder
}

// MockcacheMockRecorder is the mock recorder for Mockcache.
type MockcacheMockRecorder struct {
	mock *Mockcache
}

// NewMockcache creates a new mock instance.
func NewMockcache(ctrl *gomock.Controller) *Mockcache {
	mock := &Mockcache{ctrl: ctrl}
	mock.recorder = &MockcacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcache) EXPECT() *MockcacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockcache) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcache)(nil).Get), key)
}

// Put mocks base method.
func (m *Mockcache) Put(ctx context.Context, key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", ctx, key, value)
}

// Put indicates an expected call of Put.
func (mr *MockcacheMockRecorder) Put(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*Mockcache)(nil).Put), ctx, key, value)
}

// Mockdecorated is a mock of decorated interface.
type Mockdecorated struct {
	ctrl     *gomock.Controller
	recorder *MockdecoratedMockRecorder
}

// MockdecoratedMockRecorder is the mock recorder for Mockdecorated.
type MockdecoratedMockRecorder struct {
	mock *Mockdecorated
}

// NewMockdecorated creates a new mock instance.
func NewMockdecorated(ctrl *gomock.Controller) *Mockdecorated {
	mock := &Mockdecorated{ctrl: ctrl}
	mock.recorder = &MockdecoratedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockdecorated) EXPECT() *MockdecoratedMockRecorder {
	return m.recorder
}

// Leagues mocks base method.
func (m *Mockdecorated) Leagues(ctx context.Context) ([]models.Leagues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leagues", ctx)
	ret0, _ := ret[0].([]models.Leagues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Leagues indicates an expected call of Leagues.
func (mr *MockdecoratedMockRecorder) Leagues(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leagues", reflect.TypeOf((*Mockdecorated)(nil).Leagues), ctx)
}

// Teams mocks base method.
func (m *Mockdecorated) Teams(ctx context.Context) ([]models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teams", ctx)
	ret0, _ := ret[0].([]models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teams indicates an expected call of Teams.
func (mr *MockdecoratedMockRecorder) Teams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teams", reflect.TypeOf((*Mockdecorated)(nil).Teams), ctx)
}
